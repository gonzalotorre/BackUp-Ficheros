package Vista.GUI;

import Modelo.OperacionesFicheros;
import Vista.DTO.Fichero;
import Vista.Logica.LogicaFichero;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

/**
 *
 * @author Gonzalo
 */
public class JFrameVentanaPrincipal extends javax.swing.JFrame {

    ArrayList<String> extensiones = new ArrayList<>();

    /**
     * Creates new form JFrameVentanaPrincipal
     */
    public JFrameVentanaPrincipal() {
        initComponents();
        //Para cambiar el nombre de la aplicación.
        setTitle("BackUp");
        //Para cambiar el icono de la aplicación.
        Image icono = new ImageIcon("images" + File.separator + "icono.gif").getImage();
        setIconImage(icono);
        try {

            File fichero = new File("help" + File.separator + "help_set.hs");
            URL hsURL = fichero.toURI().toURL();
            // Crea el HelpSet y el HelpBroker
            HelpSet helpset = new HelpSet(getClass().getClassLoader(), hsURL);
            HelpBroker hb = helpset.createHelpBroker();
            // Pone ayuda a item de menu al pulsarlo.
            hb.enableHelpOnButton(ayudaMenuItem, "JFrameVentanaPrincipal", helpset);
            hb.enableHelpKey(getRootPane(), "JFrameVentanaPrincipal", helpset);
        } catch (MalformedURLException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (HelpSetException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Método para actualizar la barra de progreso.
     *
     * @param rutaArchivo que sería la ruta del archivo que se está copiando.
     * @param progreso que sería el valor a introducir en la barra de progreso.
     */
    public void actualizarInterfazProgreso(String rutaArchivo, int progreso) {
        jLabelNombreFicheroCopiado.setText(rutaArchivo);
        jProgressBarFicherosCopiados.setValue(progreso);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelROrigen = new javax.swing.JLabel();
        jLabelRDestino = new javax.swing.JLabel();
        jPanelConfiguracion = new javax.swing.JPanel();
        jLabelConfiguracion = new javax.swing.JLabel();
        jLabelArchivosCopiar = new javax.swing.JLabel();
        jLabelDestino = new javax.swing.JLabel();
        jLabelTiposArchivo = new javax.swing.JLabel();
        jButtonColorFondoSeleccionarOrigen = new GUI.JButtonColorFondo();
        jButtonColorFondoSeleccionarRutaDestino = new GUI.JButtonColorFondo();
        jCheckBoxTodos = new GUI.JCheckBoxPropio();
        jCheckBoxJPG = new GUI.JCheckBoxPropio();
        jCheckBoxPNG = new GUI.JCheckBoxPropio();
        jCheckBoxGIF = new GUI.JCheckBoxPropio();
        jCheckBoxAVI = new GUI.JCheckBoxPropio();
        jCheckBoxMP4 = new GUI.JCheckBoxPropio();
        jCheckBoxMP3 = new GUI.JCheckBoxPropio();
        jCheckBoxWAV = new GUI.JCheckBoxPropio();
        jCheckBoxPDF = new GUI.JCheckBoxPropio();
        jCheckBoxTXT = new GUI.JCheckBoxPropio();
        jCheckBoxDOC = new GUI.JCheckBoxPropio();
        jLabelRutaOrigen = new javax.swing.JLabel();
        jLabelRutaDestino = new javax.swing.JLabel();
        jLabelEspacioLibreYDuplicados = new javax.swing.JLabel();
        jLabelTitulo = new javax.swing.JLabel();
        jPanelOtrasOpciones = new javax.swing.JPanel();
        jLabelOtrasOpciones = new javax.swing.JLabel();
        jButtonColorFondoVerCopiados = new GUI.JButtonColorFondo();
        jButtonColorFondoEliminarCopia = new GUI.JButtonColorFondo();
        jButtonColorFondoEliminarDuplicados = new GUI.JButtonColorFondo();
        jButtonColorFondoOrganizarBackUp = new GUI.JButtonColorFondo();
        jButtonColorFondoEliminarCopiaOrdenada = new GUI.JButtonColorFondo();
        jLabelAvisos = new javax.swing.JLabel();
        jProgressBarFicherosCopiados = new javax.swing.JProgressBar();
        jLabelNombreFicheroCopiado = new javax.swing.JLabel();
        jButtonColorFondoHacerBackUp = new GUI.JButtonColorFondo();
        jButtonColorFondoEspacioLibre = new GUI.JButtonColorFondo();
        jButtonColorFondoDuplicados = new GUI.JButtonColorFondo();
        jButtonColorFondoVerDuplicados = new GUI.JButtonColorFondo();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ayudaMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelROrigen.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelROrigen.setText("Ruta Origen");

        jLabelRDestino.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelRDestino.setText("Ruta Destino");

        jPanelConfiguracion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelConfiguracion.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelConfiguracion.setText("Configuración");

        jLabelArchivosCopiar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelArchivosCopiar.setText("Seleccionar ruta de archivos a copiar");

        jLabelDestino.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelDestino.setText("Seleccionar ruta de destino");

        jLabelTiposArchivo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelTiposArchivo.setText("Selecciona los archivos a copiar");

        jButtonColorFondoSeleccionarOrigen.setText("Seleccionar");
        jButtonColorFondoSeleccionarOrigen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoSeleccionarOrigenMouseClicked(evt);
            }
        });

        jButtonColorFondoSeleccionarRutaDestino.setText("Seleccionar");
        jButtonColorFondoSeleccionarRutaDestino.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoSeleccionarRutaDestinoMouseClicked(evt);
            }
        });

        jCheckBoxTodos.setText("Todos");
        jCheckBoxTodos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxTodosMouseClicked(evt);
            }
        });

        jCheckBoxJPG.setText("jpg");
        jCheckBoxJPG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxJPGMouseClicked(evt);
            }
        });

        jCheckBoxPNG.setText("png");
        jCheckBoxPNG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxPNGMouseClicked(evt);
            }
        });

        jCheckBoxGIF.setText("gif");
        jCheckBoxGIF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxGIFMouseClicked(evt);
            }
        });

        jCheckBoxAVI.setText("avi");
        jCheckBoxAVI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxAVIMouseClicked(evt);
            }
        });

        jCheckBoxMP4.setText("mp4");
        jCheckBoxMP4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxMP4MouseClicked(evt);
            }
        });

        jCheckBoxMP3.setText("mp3");
        jCheckBoxMP3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxMP3MouseClicked(evt);
            }
        });

        jCheckBoxWAV.setText("wav");
        jCheckBoxWAV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxWAVMouseClicked(evt);
            }
        });

        jCheckBoxPDF.setText("pdf");
        jCheckBoxPDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxPDFMouseClicked(evt);
            }
        });

        jCheckBoxTXT.setText("txt");
        jCheckBoxTXT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxTXTMouseClicked(evt);
            }
        });

        jCheckBoxDOC.setText("doc");
        jCheckBoxDOC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxDOCMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelConfiguracionLayout = new javax.swing.GroupLayout(jPanelConfiguracion);
        jPanelConfiguracion.setLayout(jPanelConfiguracionLayout);
        jPanelConfiguracionLayout.setHorizontalGroup(
            jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                        .addComponent(jLabelTiposArchivo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                        .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelConfiguracion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDestino, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelArchivosCopiar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonColorFondoSeleccionarOrigen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(jButtonColorFondoSeleccionarRutaDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxTodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxJPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(22, 22, 22))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelConfiguracionLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxMP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)))
                                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxPNG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBoxGIF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxWAV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBoxPDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxAVI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBoxMP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                                        .addComponent(jCheckBoxTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBoxDOC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelConfiguracionLayout.setVerticalGroup(
            jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfiguracionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelConfiguracion)
                .addGap(7, 7, 7)
                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelArchivosCopiar, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jButtonColorFondoSeleccionarOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonColorFondoSeleccionarRutaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelTiposArchivo)
                .addGap(13, 13, 13)
                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxJPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxPNG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxGIF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxAVI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxMP4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelConfiguracionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMP3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxWAV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxPDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxDOC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxTodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabelRutaOrigen.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelRutaOrigen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelRutaDestino.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelEspacioLibreYDuplicados.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelTitulo.setForeground(new java.awt.Color(51, 0, 255));
        jLabelTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitulo.setText("Copia de seguridad de discos");

        jPanelOtrasOpciones.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelOtrasOpciones.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelOtrasOpciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOtrasOpciones.setText("Otras Opciones");

        jButtonColorFondoVerCopiados.setText("Ver archivos copiados");
        jButtonColorFondoVerCopiados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoVerCopiadosMouseClicked(evt);
            }
        });

        jButtonColorFondoEliminarCopia.setText("Eliminar copia");
        jButtonColorFondoEliminarCopia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoEliminarCopiaMouseClicked(evt);
            }
        });

        jButtonColorFondoEliminarDuplicados.setText("Eliminar duplicados");
        jButtonColorFondoEliminarDuplicados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoEliminarDuplicadosMouseClicked(evt);
            }
        });

        jButtonColorFondoOrganizarBackUp.setText("Organizar BackUp");
        jButtonColorFondoOrganizarBackUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoOrganizarBackUpMouseClicked(evt);
            }
        });

        jButtonColorFondoEliminarCopiaOrdenada.setText("Eliminar copia ordenada");
        jButtonColorFondoEliminarCopiaOrdenada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoEliminarCopiaOrdenadaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelOtrasOpcionesLayout = new javax.swing.GroupLayout(jPanelOtrasOpciones);
        jPanelOtrasOpciones.setLayout(jPanelOtrasOpcionesLayout);
        jPanelOtrasOpcionesLayout.setHorizontalGroup(
            jPanelOtrasOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOtrasOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOtrasOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelOtrasOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonColorFondoEliminarCopia, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonColorFondoEliminarDuplicados, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelOtrasOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonColorFondoVerCopiados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonColorFondoOrganizarBackUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonColorFondoEliminarCopiaOrdenada, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelOtrasOpcionesLayout.setVerticalGroup(
            jPanelOtrasOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOtrasOpcionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOtrasOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelOtrasOpciones)
                    .addComponent(jButtonColorFondoVerCopiados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelOtrasOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonColorFondoEliminarCopia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonColorFondoOrganizarBackUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelOtrasOpcionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonColorFondoEliminarDuplicados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonColorFondoEliminarCopiaOrdenada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabelAvisos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelAvisos.setText(" ");

        jButtonColorFondoHacerBackUp.setText("Hacer BackUp");
        jButtonColorFondoHacerBackUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoHacerBackUpMouseClicked(evt);
            }
        });

        jButtonColorFondoEspacioLibre.setText("Espacio libre en disco");
        jButtonColorFondoEspacioLibre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoEspacioLibreMouseClicked(evt);
            }
        });

        jButtonColorFondoDuplicados.setText("Archivos duplicados");
        jButtonColorFondoDuplicados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoDuplicadosMouseClicked(evt);
            }
        });

        jButtonColorFondoVerDuplicados.setText("Ver duplicados");
        jButtonColorFondoVerDuplicados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonColorFondoVerDuplicadosMouseClicked(evt);
            }
        });

        jMenu1.setText("Ayuda");

        ayudaMenuItem.setText("Ayuda pantalla principal");
        jMenu1.add(ayudaMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelAvisos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelROrigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(171, 171, 171))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelRDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(167, 167, 167))
                            .addComponent(jLabelRutaOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelRutaDestino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelEspacioLibreYDuplicados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgressBarFicherosCopiados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButtonColorFondoHacerBackUp, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButtonColorFondoDuplicados, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButtonColorFondoEspacioLibre, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButtonColorFondoVerDuplicados, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabelNombreFicheroCopiado, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelConfiguracion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelOtrasOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelTitulo)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelROrigen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelRutaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelRDestino)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelRutaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonColorFondoHacerBackUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonColorFondoEspacioLibre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonColorFondoDuplicados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonColorFondoVerDuplicados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabelEspacioLibreYDuplicados, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jProgressBarFicherosCopiados, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelNombreFicheroCopiado, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelOtrasOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelConfiguracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelAvisos, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonColorFondoHacerBackUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoHacerBackUpMouseClicked
        try {
            jLabelAvisos.setText("");
            if ("".equals(jLabelRutaDestino.getText())) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("Por favor introduce las rutas de origen y destino.");
            } else {
                File rutaOrigen = new File(jLabelRutaOrigen.getText());
                File rutaDestino = new File(jLabelRutaDestino.getText() + "\\BackUp");
                ArrayList<File> numFicheros = new ArrayList<>();
                OperacionesFicheros operaciones = new OperacionesFicheros(this);

                numFicheros = OperacionesFicheros.listarFicherosExtension(rutaOrigen, extensiones);
                jProgressBarFicherosCopiados.setMaximum(numFicheros.size());
                Thread queryThread = new Thread() {
                    @Override
                    public void run() {
                        try {
                            operaciones.copiarConFiltro(rutaOrigen, rutaDestino, extensiones, 1);
                            OperacionesFicheros.eliminaCarpetasVacias(rutaDestino);
                            jLabelAvisos.setForeground(Color.green);
                            jLabelAvisos.setText("Se ha hecho la copia de seguridad.");
                        } catch (IOException ex) {
                            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                };
                queryThread.start();
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoHacerBackUpMouseClicked

    private void jButtonColorFondoEspacioLibreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoEspacioLibreMouseClicked
        jLabelAvisos.setText("");
        if ("".equals(jLabelRutaDestino.getText())) {
            jLabelAvisos.setForeground(Color.red);
            jLabelAvisos.setText("Por favor introduce la ruta del disco (destino) para saber el espacio libre.");
        } else {
            File disco = new File(jLabelRutaDestino.getText());
            long espacio = OperacionesFicheros.espacioLibre(disco);
            jLabelEspacioLibreYDuplicados.setText("Quedan " + espacio + "Gb libres");
        }
    }//GEN-LAST:event_jButtonColorFondoEspacioLibreMouseClicked

    private void jButtonColorFondoDuplicadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoDuplicadosMouseClicked
        try {
            jLabelAvisos.setText("");
            ArrayList<File> listaDuplicados = new ArrayList<>();
            if ("".equals(jLabelRutaDestino.getText())) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("Debes hacer primero el backup para comprobar si hay arcivos duplicados o seleccionar la ruta destino.");
            } else {
                File ruta = new File(jLabelRutaDestino.getText() + File.separator + "BackUp");
                //Faltaría comprobar si existe o no la carpeta BackUp para comprobar los duplicaods
                listaDuplicados = OperacionesFicheros.buscarDuplicados(ruta);
                jLabelEspacioLibreYDuplicados.setText("Encontrados " + listaDuplicados.size() + " duplicados");
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoDuplicadosMouseClicked

    private void jButtonColorFondoVerDuplicadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoVerDuplicadosMouseClicked
        try {
            jLabelAvisos.setText("");
            File ruta = new File(jLabelRutaDestino.getText() + File.separator + "BackUp");
            if (!ruta.exists()) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("Para ver los archivos duplicados debes hacer la copia de seguridad primero o seleccionar la ruta destino.");
            } else {
                ArrayList<File> listaDuplicados = new ArrayList<>();
                listaDuplicados = OperacionesFicheros.buscarDuplicados(ruta);
                for (File file : listaDuplicados) {
                    int indice = file.getName().indexOf(".");
                    String extension = file.getName().toLowerCase().substring(indice + 1);
                    Fichero f = new Fichero(file.getName(), extension, file.length());
                    LogicaFichero.add(f);
                }
                TablaFicherosDuplicados t = new TablaFicherosDuplicados(this, true);
                t.setVisible(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoVerDuplicadosMouseClicked

    private void jButtonColorFondoVerCopiadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoVerCopiadosMouseClicked
        try {
            jLabelAvisos.setText("");
            File ruta = new File(jLabelRutaDestino.getText() + File.separator + "BackUp");
            if (!ruta.exists()) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("Para ver los archivos copiados debes hacer la copia de seguridad primero o seleccionar la ruta destino.");
            } else {
                ArrayList<File> lista = new ArrayList<>();
                lista = OperacionesFicheros.listarFicherosExtension(ruta, extensiones);
                for (File file : lista) {
                    if ((!file.isDirectory()) || (!file.exists())) {
                        int indice = file.getName().indexOf(".");
                        String extension = file.getName().toLowerCase().substring(indice + 1);
                        Fichero f = new Fichero(file.getName(), extension, file.length());
                        LogicaFichero.add(f);
                    }
                }
                TablaFicheros t = new TablaFicheros(this, true);
                t.setVisible(true);
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoVerCopiadosMouseClicked

    private void jButtonColorFondoEliminarCopiaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoEliminarCopiaMouseClicked
        try {
            jLabelAvisos.setText("");
            if ("".equals(jLabelRutaDestino.getText())) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("Por favor introduce la ruta del directorio a eliminar (destino).");
            } else {
                File ruta = new File(jLabelRutaDestino.getText() + File.separator + "BackUp");
                OperacionesFicheros.eliminarCopia(ruta);
                jLabelAvisos.setForeground(Color.green);
                jLabelAvisos.setText("Se ha borrado la copia de seguirad.");
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoEliminarCopiaMouseClicked

    private void jButtonColorFondoEliminarDuplicadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoEliminarDuplicadosMouseClicked
        try {
            jLabelAvisos.setText("");
            File ruta = new File(jLabelRutaDestino.getText() + File.separator + "BackUp");
            if (!ruta.exists()) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("Para borrar duplicados debes hacer primero copia de seguridad primero o seleccionar la ruta destino.");
            } else {
                OperacionesFicheros.borrarDuplicados(ruta);
                OperacionesFicheros.eliminaCarpetasVacias(ruta);
                jLabelAvisos.setForeground(Color.green);
                jLabelAvisos.setText("Se han borrado los archivos duplicados");
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoEliminarDuplicadosMouseClicked

    private void jButtonColorFondoOrganizarBackUpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoOrganizarBackUpMouseClicked
        try {
            jLabelAvisos.setText("");
            if ("".equals(jLabelRutaDestino.getText())) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("Debes hacer primero la copia de seguridad.");
            } else {
                File rutaBackUp = new File(jLabelRutaDestino.getText() + File.separator + "BackUp");
                /*if (!(rutaBackUp.length() == 0)) {*/
                //Está mal subido y mal hecho esta comprobación, ya que el length de un direcctorio da 0
                OperacionesFicheros.oredenarBackUp(rutaBackUp, jLabelRutaDestino.getText() + File.separator + "BackUp");
                jLabelAvisos.setForeground(Color.green);
                jLabelAvisos.setText("Se ha ordenado la copia de seguirad en una nueva carpeta.");
                /*} else {
                    jLabelAvisos.setForeground(Color.red);
                    jLabelAvisos.setText("No se pudo organizar la copia de seguridad, la carpeta BackUp está vacía.");
                }*/
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoOrganizarBackUpMouseClicked

    private void jButtonColorFondoEliminarCopiaOrdenadaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoEliminarCopiaOrdenadaMouseClicked
        try {
            jLabelAvisos.setText("");
            File copiaOrdenada = new File(jLabelRutaDestino.getText() + File.separator + "BackUpOrdenado");
            if (!copiaOrdenada.exists()) {
                jLabelAvisos.setForeground(Color.red);
                jLabelAvisos.setText("La copia ordenada no existe o no está hecha, por favor introduce la ruta correcta o haz la copia ordenada.");
            } else {
                OperacionesFicheros.eliminarCopia(copiaOrdenada);
                jLabelAvisos.setForeground(Color.green);
                jLabelAvisos.setText("Se ha borrado la copia de seguirad ordenada.");
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonColorFondoEliminarCopiaOrdenadaMouseClicked

    private void jButtonColorFondoSeleccionarOrigenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoSeleccionarOrigenMouseClicked
        jLabelAvisos.setText("");
        JFileChooser buscador = new JFileChooser();
        buscador.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int result = buscador.showOpenDialog(jLabelRutaOrigen);
        if (result == JFileChooser.APPROVE_OPTION) {
            File fichero = buscador.getSelectedFile();
            jLabelRutaOrigen.setText(fichero.getAbsolutePath());
        } else if (result == JFileChooser.CANCEL_OPTION) {
            jLabelRutaOrigen.setText("No se seleccionó ningún directorio/archivo.");
        }
    }//GEN-LAST:event_jButtonColorFondoSeleccionarOrigenMouseClicked

    private void jButtonColorFondoSeleccionarRutaDestinoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonColorFondoSeleccionarRutaDestinoMouseClicked
        jLabelAvisos.setText("");
        JFileChooser buscador = new JFileChooser();
        buscador.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = buscador.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File fichero = buscador.getSelectedFile();
            jLabelRutaDestino.setText(fichero.getAbsolutePath());
        } else if (result == JFileChooser.CANCEL_OPTION) {
            jLabelRutaDestino.setText("No se seleccionó ningún directorio/archivo.");
        }
    }//GEN-LAST:event_jButtonColorFondoSeleccionarRutaDestinoMouseClicked

    private void jCheckBoxTodosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxTodosMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxTodos.isSelected()) {
            jCheckBoxJPG.setSelected(true);
            extensiones.add(jCheckBoxJPG.getText());
            jCheckBoxPNG.setSelected(true);
            extensiones.add(jCheckBoxPNG.getText());
            jCheckBoxGIF.setSelected(true);
            extensiones.add(jCheckBoxGIF.getText());
            jCheckBoxAVI.setSelected(true);
            extensiones.add(jCheckBoxAVI.getText());
            jCheckBoxMP4.setSelected(true);
            extensiones.add(jCheckBoxMP4.getText());
            jCheckBoxMP3.setSelected(true);
            extensiones.add(jCheckBoxMP3.getText());
            jCheckBoxWAV.setSelected(true);
            extensiones.add(jCheckBoxWAV.getText());
            jCheckBoxPDF.setSelected(true);
            extensiones.add(jCheckBoxPDF.getText());
            jCheckBoxTXT.setSelected(true);
            extensiones.add(jCheckBoxTXT.getText());
            jCheckBoxDOC.setSelected(true);
            extensiones.add(jCheckBoxDOC.getText());
        } else if (!jCheckBoxTodos.isSelected()) {
            jCheckBoxJPG.setSelected(false);
            jCheckBoxPNG.setSelected(false);
            jCheckBoxGIF.setSelected(false);
            jCheckBoxAVI.setSelected(false);
            jCheckBoxMP4.setSelected(false);
            jCheckBoxMP3.setSelected(false);
            jCheckBoxWAV.setSelected(false);
            jCheckBoxPDF.setSelected(false);
            jCheckBoxTXT.setSelected(false);
            jCheckBoxDOC.setSelected(false);
            Iterator iterator = extensiones.iterator();
            while (iterator.hasNext()) {
                if (extensiones.contains(iterator.next())) {
                    iterator.remove();
                }
            }
        }
    }//GEN-LAST:event_jCheckBoxTodosMouseClicked

    private void jCheckBoxJPGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxJPGMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxJPG.isSelected()) {
            extensiones.add(jCheckBoxJPG.getText());
        } else {
            if (extensiones.contains(jCheckBoxJPG.getText())) {
                extensiones.remove(jCheckBoxJPG.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxJPGMouseClicked

    private void jCheckBoxPNGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxPNGMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxPNG.isSelected()) {
            extensiones.add(jCheckBoxPNG.getText());
        } else {
            if (extensiones.contains(jCheckBoxPNG.getText())) {
                extensiones.remove(jCheckBoxPNG.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxPNGMouseClicked

    private void jCheckBoxGIFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxGIFMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxGIF.isSelected()) {
            extensiones.add(jCheckBoxGIF.getText());
        } else {
            if (extensiones.contains(jCheckBoxGIF.getText())) {
                extensiones.remove(jCheckBoxGIF.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxGIFMouseClicked

    private void jCheckBoxAVIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxAVIMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxAVI.isSelected()) {
            extensiones.add(jCheckBoxAVI.getText());
        } else {
            if (extensiones.contains(jCheckBoxAVI.getText())) {
                extensiones.remove(jCheckBoxAVI.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxAVIMouseClicked

    private void jCheckBoxMP4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxMP4MouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxMP4.isSelected()) {
            extensiones.add(jCheckBoxMP4.getText());
        } else {
            if (extensiones.contains(jCheckBoxMP4.getText())) {
                extensiones.remove(jCheckBoxMP4.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxMP4MouseClicked

    private void jCheckBoxMP3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxMP3MouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxMP3.isSelected()) {
            extensiones.add(jCheckBoxMP3.getText());
        } else {
            if (extensiones.contains(jCheckBoxMP3.getText())) {
                extensiones.remove(jCheckBoxMP3.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxMP3MouseClicked

    private void jCheckBoxWAVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxWAVMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxWAV.isSelected()) {
            extensiones.add(jCheckBoxWAV.getText());
        } else {
            if (extensiones.contains(jCheckBoxWAV.getText())) {
                extensiones.remove(jCheckBoxWAV.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxWAVMouseClicked

    private void jCheckBoxPDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxPDFMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxPDF.isSelected()) {
            extensiones.add(jCheckBoxPDF.getText());
        } else {
            if (extensiones.contains(jCheckBoxPDF.getText())) {
                extensiones.remove(jCheckBoxPDF.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxPDFMouseClicked

    private void jCheckBoxTXTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxTXTMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxTXT.isSelected()) {
            extensiones.add(jCheckBoxTXT.getText());
        } else {
            if (extensiones.contains(jCheckBoxTXT.getText())) {
                extensiones.remove(jCheckBoxTXT.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxTXTMouseClicked

    private void jCheckBoxDOCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxDOCMouseClicked
        jLabelAvisos.setText("");
        if (jCheckBoxDOC.isSelected()) {
            extensiones.add(jCheckBoxDOC.getText());
        } else {
            if (extensiones.contains(jCheckBoxDOC.getText())) {
                extensiones.remove(jCheckBoxDOC.getText());
            }
        }
    }//GEN-LAST:event_jCheckBoxDOCMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameVentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameVentanaPrincipal().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ayudaMenuItem;
    private GUI.JButtonColorFondo jButtonColorFondoDuplicados;
    private GUI.JButtonColorFondo jButtonColorFondoEliminarCopia;
    private GUI.JButtonColorFondo jButtonColorFondoEliminarCopiaOrdenada;
    private GUI.JButtonColorFondo jButtonColorFondoEliminarDuplicados;
    private GUI.JButtonColorFondo jButtonColorFondoEspacioLibre;
    private GUI.JButtonColorFondo jButtonColorFondoHacerBackUp;
    private GUI.JButtonColorFondo jButtonColorFondoOrganizarBackUp;
    private GUI.JButtonColorFondo jButtonColorFondoSeleccionarOrigen;
    private GUI.JButtonColorFondo jButtonColorFondoSeleccionarRutaDestino;
    private GUI.JButtonColorFondo jButtonColorFondoVerCopiados;
    private GUI.JButtonColorFondo jButtonColorFondoVerDuplicados;
    private GUI.JCheckBoxPropio jCheckBoxAVI;
    private GUI.JCheckBoxPropio jCheckBoxDOC;
    private GUI.JCheckBoxPropio jCheckBoxGIF;
    private GUI.JCheckBoxPropio jCheckBoxJPG;
    private GUI.JCheckBoxPropio jCheckBoxMP3;
    private GUI.JCheckBoxPropio jCheckBoxMP4;
    private GUI.JCheckBoxPropio jCheckBoxPDF;
    private GUI.JCheckBoxPropio jCheckBoxPNG;
    private GUI.JCheckBoxPropio jCheckBoxTXT;
    private GUI.JCheckBoxPropio jCheckBoxTodos;
    private GUI.JCheckBoxPropio jCheckBoxWAV;
    private javax.swing.JLabel jLabelArchivosCopiar;
    private javax.swing.JLabel jLabelAvisos;
    private javax.swing.JLabel jLabelConfiguracion;
    private javax.swing.JLabel jLabelDestino;
    private javax.swing.JLabel jLabelEspacioLibreYDuplicados;
    private javax.swing.JLabel jLabelNombreFicheroCopiado;
    private javax.swing.JLabel jLabelOtrasOpciones;
    private javax.swing.JLabel jLabelRDestino;
    private javax.swing.JLabel jLabelROrigen;
    private javax.swing.JLabel jLabelRutaDestino;
    private javax.swing.JLabel jLabelRutaOrigen;
    private javax.swing.JLabel jLabelTiposArchivo;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanelConfiguracion;
    private javax.swing.JPanel jPanelOtrasOpciones;
    private javax.swing.JProgressBar jProgressBarFicherosCopiados;
    // End of variables declaration//GEN-END:variables

}
